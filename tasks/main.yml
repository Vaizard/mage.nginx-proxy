---

- name: "Including distro-specific variables"
  include_vars: "vars_{{ ansible_distribution }}.yml"

- name: "Setting up nginx for {{ ansible_distribution }}"
  include: "setup_{{ ansible_distribution }}.yml"
  when: ansible_distribution in [ 'Ubuntu', 'Gentoo' ]

- name: "Ensuring /etc/nginx/snippets/mage_http.conf is present"
  template:
    src: "nginx-snippets/mage_http.conf"
    dest: "/etc/nginx/snippets/mage_http.conf"
    mode: 0644
  notify: 
    - reload nginx

- name: "Ensuring /etc/nginx/snippets/mage_proxyheaders.conf"
  template:
    src: "nginx-snippets/mage_proxyheaders.conf"
    dest: "/etc/nginx/snippets/mage_proxyheaders.conf"
    mode: 0644
  notify: 
    - reload nginx
    
- name: "Ensuring /etc/nginx/snippets/mage_responses.conf"
  template:
    src: "nginx-snippets/mage_responses.conf"
    dest: "/etc/nginx/snippets/mage_responses.conf"
    mode: 0644
  notify: 
    - reload nginx

- name: "Ensuring /etc/nginx/snippets/mage_secure.conf"
  template:
    src: "nginx-snippets/mage_secure.conf"
    dest: "/etc/nginx/snippets/mage_secure.conf"
    mode: 0644
  notify: 
    - reload nginx

- name: "Ensuring a current upstream list is provided."
  template:
    src: upstream.j2
    dest: "/etc/nginx/conf.d/upstream.conf"
    mode: 0644
    owner: root
    group: root
  notify:
    - reload nginx

#
# OK, this is the tricky part. The mage.nginx-proxy is intended to work along mage.letsencrypt, but there's a certificate
# chicken & egg problem, since for now, mage.letsencrypt relies on mage.nginx-proxy to supply the http server to perform
# the certificate request and mage.nginx-proxy on mage.letsencrypt to provide https certificates.
#
# The current solution is byfar not the best, but it works, along these lines:
#
# 1. We run mage.nginx-proxy first
# 2. The site templates (default and vhosts) will look if the letsencrypt certificates specified with 
#    {{ nginx_proxy_default_certificate }} and {{ nginx_proxy_default_certificate_key }}  or with
#    {{ nginx_proxy_server.item.certificate }} and {{ nginx_proxy_server.item.certificate_key }} exist.
#    If not, the default snakeoil certs will be used for the https server blocks in the templates.
#    The snakeoil certs are provided by the dependency role "mage-common"
# 3. Using the snakeoil certs will allow to start up nginx
# 4. mage.letsencrypt is called, certs generated.
# 5. mage.nginx-proxy is called again, since it will now find the letsencrypt certificates, it will
#    regenerate the configuration files from templates changing paths of certs and restart nginx.
#


#
# Testing if default production certificates (inteded to be generated by letsencrypt) are present
#
- stat: path={{ nginx_proxy_default_certificate }}
  register: default_certificate

- stat: path={{ nginx_proxy_default_certificate_key }}
  register: default_certificate_key
  
- stat: path={{ nginx_proxy_default_trusted_certificate }}
  register: default_trusted_certificate

# 
# Generating the default and vhost conf files (see also comments in the vhost.j2 template)
#

- name: "Ensuring a correctly configured default site definition file is provided."
  template:
    src: default.j2
    dest: "/etc/nginx/sites-available/default"
    mode: 0644
    owner: root
    group: root
  notify:
    - reload nginx
    
- name: "Ensuring all vhost configurations are present"
  template:
    src: vhost.j2
    dest: "/etc/nginx/sites-available/{{ item.name }}"
    mode: 0644
    owner: root
    group: root
  with_items: "{{ nginx_proxy_server }}"
  notify:
    - reload nginx

# 
# Finalizing
#
    
- name: "Ensuring all vhost configurations are enabled"
  file:
    src: "/etc/nginx/sites-available/{{ item.name }}"
    dest: "/etc/nginx/sites-enabled/{{ item.name }}"
    mode: 0644
    owner: root
    group: root
    state: link
  with_items: "{{ nginx_proxy_server }}"
  notify:
    - reload nginx

- name: "Ensuring nginx is started and enabled to start at boot."
  service: name=nginx state=started enabled=yes
